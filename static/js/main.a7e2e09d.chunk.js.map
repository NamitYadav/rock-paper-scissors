{"version":3,"sources":["store/constants.ts","store/actions.ts","components/score/score.tsx","components/player/player.tsx","components/game-type-selector/game-type-selector.tsx","components/weapon-btn/weapon-btn.tsx","components/home/home.tsx","App.tsx","serviceWorker.js","store/reducer.ts","index.tsx","localStorage.js"],"names":["WEAPONS_ENUM","ACTIONS","INCREMENT","PLAYER_ONE","PLAYER_TWO","RESET","CHANGE","GAME_TYPE_ENUM","WEAPONS","ROCK","PAPER","SCISSORS","setGameType","gameType","type","connect","state","playerOne","playerTwo","props","className","Player","weapon","mapDispatchToProps","onChange","event","target","value","PLAYER","name","defaultChecked","COMPUTER","selectWeapon","onClick","Home","winner","startGame","changePlayerOneWeapon","changePlayerTwoWeapon","counter","gameInterval","setInterval","Math","floor","random","length","setState","clearInterval","selectWinner","incrementPlayerOne","incrementPlayerTwo","playerOneWeapon","playerTwoWeapon","resetGame","resetScore","this","Component","App","Boolean","window","location","hostname","match","initialState","rootReducer","action","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a7e2e09d.chunk.js","sourcesContent":["export const ACTIONS = {\r\n  SCORE: {\r\n    INCREMENT: {\r\n      PLAYER_ONE: 'Actions.Score.Increment.PlayerOne',\r\n      PLAYER_TWO: 'Actions.Score.Increment.PlayerTwo',\r\n    },\r\n    RESET: 'Actions.Score.Reset',\r\n  },\r\n  GAME_TYPE_ENUM: 'Actions.GameType',\r\n  WEAPON: {\r\n    CHANGE: {\r\n      PLAYER_ONE: 'Actions.Weapon.Change.PlayerOne',\r\n      PLAYER_TWO: 'Actions.Weapon.Change.PlayerTwo',\r\n    },\r\n  },\r\n};\r\n\r\nexport enum WEAPONS_ENUM {\r\n  ROCK = 'rock',\r\n  PAPER = 'paper',\r\n  SCISSORS = 'scissors',\r\n}\r\n\r\nexport const WEAPONS = [WEAPONS_ENUM.ROCK, WEAPONS_ENUM.PAPER, WEAPONS_ENUM.SCISSORS];\r\n\r\nexport enum GAME_TYPE_ENUM {\r\n  PLAYER = 'player',\r\n  COMPUTER = 'computer',\r\n}\r\n","import { ACTIONS, WEAPONS_ENUM } from './constants';\r\n\r\nexport const incrementPlayerOne = () => ({\r\n  type: ACTIONS.SCORE.INCREMENT.PLAYER_ONE,\r\n});\r\n\r\nexport const incrementPlayerTwo = () => ({\r\n  type: ACTIONS.SCORE.INCREMENT.PLAYER_TWO,\r\n});\r\n\r\nexport const resetScore = () => ({\r\n  type: ACTIONS.SCORE.RESET,\r\n});\r\n\r\nexport const setGameType = (gameType: string) => ({\r\n  type: ACTIONS.GAME_TYPE_ENUM,\r\n  gameType,\r\n});\r\n\r\nexport const changePlayerOneWeapon = (weapon: WEAPONS_ENUM) => ({\r\n  type: ACTIONS.WEAPON.CHANGE.PLAYER_ONE,\r\n  weapon,\r\n});\r\n\r\nexport const changePlayerTwoWeapon = (weapon: WEAPONS_ENUM) => ({\r\n  type: ACTIONS.WEAPON.CHANGE.PLAYER_TWO,\r\n  weapon,\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { WEAPONS_ENUM } from '../../store/constants';\r\n\r\nimport './score.css';\r\n\r\ninterface Props {\r\n  playerOne?: WEAPONS_ENUM;\r\n  playerTwo?: WEAPONS_ENUM;\r\n}\r\n\r\nconst Score = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <fieldset className='s-container'>\r\n        <legend>Score Board</legend>\r\n        <div className='s-player'>\r\n          <span className='s-player-name'>Player 1: </span>\r\n          <span className='s-player-score'>{props.playerOne}</span>\r\n        </div>\r\n        <div className='s-player'>\r\n          <span className='s-player-name'>Player 2: </span>\r\n          <span className='s-player-score'>{props.playerTwo}</span>\r\n        </div>\r\n      </fieldset>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    playerOne: state.playerOne,\r\n    playerTwo: state.playerTwo,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Score);\r\n","import React from 'react';\r\n\r\nimport './player.css';\r\nimport { WEAPONS_ENUM } from '../../store/constants';\r\n\r\ninterface Props {\r\n  weapon: WEAPONS_ENUM;\r\n}\r\n\r\nconst Player = ({ weapon }: Props) => (\r\n  <>\r\n    <div>\r\n      {weapon === WEAPONS_ENUM.ROCK ? (\r\n        <i className='font-icon far fa-hand-rock'></i>\r\n      ) : weapon === WEAPONS_ENUM.SCISSORS ? (\r\n        <i className='font-icon far fa-hand-scissors'></i>\r\n      ) : (\r\n        <i className='font-icon far fa-hand-paper'></i>\r\n      )}\r\n    </div>\r\n  </>\r\n);\r\n\r\nexport default Player;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './game-type-selector.css';\r\nimport { GAME_TYPE_ENUM } from '../../store/constants';\r\nimport { setGameType } from '../../store/actions';\r\n\r\ninterface Props {\r\n  setGameType: { (gameType: GAME_TYPE_ENUM): void };\r\n}\r\n\r\nconst GameTypeSelector = ({ setGameType }: Props) => (\r\n  <>\r\n    <div\r\n      onChange={(event: any) => {\r\n        setGameType(event.target.value);\r\n      }}>\r\n      <fieldset className='radio-group'>\r\n        <legend>Select Game Type</legend>\r\n        <span className='radio-item'>\r\n          <input type='radio' value={GAME_TYPE_ENUM.PLAYER} name='game-type' defaultChecked />{' '}\r\n          Player vs Computer\r\n        </span>\r\n        <span className='radio-item'>\r\n          <input type='radio' value={GAME_TYPE_ENUM.COMPUTER} name='game-type' /> Computer vs\r\n          Computer\r\n        </span>\r\n      </fieldset>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst mapDispatchToProps = { setGameType };\r\n\r\nexport default connect(null, mapDispatchToProps)(GameTypeSelector);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './weapon-btn.css';\r\nimport { WEAPONS_ENUM } from '../../store/constants';\r\nimport { setGameType } from '../../store/actions';\r\n\r\ninterface Props {\r\n  selectWeapon: { (weapon: WEAPONS_ENUM): void };\r\n}\r\n\r\nconst WeaponBtn = ({ selectWeapon }: Props) => (\r\n  <>\r\n    <div className='weaponBtn-container'>\r\n      <button className='weaponBtn' onClick={() => selectWeapon(WEAPONS_ENUM.ROCK)}>\r\n        <i className='home-weapon-icon far fa-hand-rock'></i>Rock\r\n      </button>\r\n      <button className='weaponBtn' onClick={() => selectWeapon(WEAPONS_ENUM.PAPER)}>\r\n        <i className='home-weapon-icon far fa-hand-paper'></i>Paper\r\n      </button>\r\n      <button className='weaponBtn' onClick={() => selectWeapon(WEAPONS_ENUM.SCISSORS)}>\r\n        <i className='home-weapon-icon far fa-hand-scissors'></i>Scissors\r\n      </button>\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst mapDispatchToProps = { setGameType };\r\n\r\nexport default connect(null, mapDispatchToProps)(WeaponBtn);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './home.css';\r\nimport {\r\n  incrementPlayerOne,\r\n  incrementPlayerTwo,\r\n  resetScore,\r\n  changePlayerOneWeapon,\r\n  changePlayerTwoWeapon,\r\n} from '../../store/actions';\r\nimport { WEAPONS, GAME_TYPE_ENUM, WEAPONS_ENUM } from '../../store/constants';\r\nimport Score from '../score/score';\r\nimport Player from '../player/player';\r\nimport GameTypeSelector from '../game-type-selector/game-type-selector';\r\nimport WeaponBtn from '../weapon-btn/weapon-btn';\r\n\r\ninterface Props {\r\n  gameType: GAME_TYPE_ENUM;\r\n  playerOneWeapon: WEAPONS_ENUM;\r\n  playerTwoWeapon: WEAPONS_ENUM;\r\n  incrementPlayerOne: { (): void };\r\n  incrementPlayerTwo: { (): void };\r\n  resetScore: { (): void };\r\n  changePlayerOneWeapon: { (weapon: WEAPONS_ENUM): void };\r\n  changePlayerTwoWeapon: { (weapon: WEAPONS_ENUM): void };\r\n}\r\n\r\nclass Home extends Component<Props> {\r\n  state = {\r\n    winner: '',\r\n  };\r\n\r\n  startGame = () => {\r\n    const { gameType, changePlayerOneWeapon, changePlayerTwoWeapon } = this.props;\r\n    let counter = 0;\r\n    let gameInterval = setInterval(() => {\r\n      counter++;\r\n      if (gameType === GAME_TYPE_ENUM.PLAYER) {\r\n        changePlayerTwoWeapon(WEAPONS[Math.floor(Math.random() * WEAPONS.length)]);\r\n        this.setState({ winner: '' });\r\n      } else {\r\n        changePlayerOneWeapon(WEAPONS[Math.floor(Math.random() * WEAPONS.length)]);\r\n        changePlayerTwoWeapon(WEAPONS[Math.floor(Math.random() * WEAPONS.length)]);\r\n        this.setState({ winner: '' });\r\n      }\r\n      if (counter > 5) {\r\n        clearInterval(gameInterval);\r\n        this.setState({ winner: this.selectWinner() });\r\n      }\r\n    }, 100);\r\n  };\r\n\r\n  selectWinner = () => {\r\n    const { incrementPlayerOne, incrementPlayerTwo, playerOneWeapon, playerTwoWeapon } = this.props;\r\n\r\n    if (playerOneWeapon === playerTwoWeapon) {\r\n      return \"It's a Tie!\";\r\n    } else if (\r\n      (playerOneWeapon === WEAPONS_ENUM.ROCK && playerTwoWeapon === WEAPONS_ENUM.SCISSORS) ||\r\n      (playerOneWeapon === WEAPONS_ENUM.SCISSORS && playerTwoWeapon === WEAPONS_ENUM.PAPER) ||\r\n      (playerOneWeapon === WEAPONS_ENUM.PAPER && playerTwoWeapon === WEAPONS_ENUM.ROCK)\r\n    ) {\r\n      incrementPlayerOne();\r\n      return 'Player One Wins!';\r\n    } else {\r\n      incrementPlayerTwo();\r\n      return 'Player Two Wins!';\r\n    }\r\n  };\r\n\r\n  selectWeapon = (weapon: any) => {\r\n    const { changePlayerOneWeapon } = this.props;\r\n    changePlayerOneWeapon(weapon);\r\n    this.setState({ winner: '' });\r\n  };\r\n\r\n  resetGame = () => {\r\n    const { resetScore } = this.props;\r\n    this.setState({ winner: '' });\r\n    resetScore();\r\n  };\r\n\r\n  render() {\r\n    const { gameType, playerOneWeapon, playerTwoWeapon } = this.props;\r\n    const { winner } = this.state;\r\n    return (\r\n      <div className='game-container'>\r\n        <div className='game-top'>\r\n          <div>\r\n            <GameTypeSelector />\r\n          </div>\r\n          <Score />\r\n        </div>\r\n\r\n        <div className='game-bottom'>\r\n          <div className='player-container'>\r\n            <div className='player'>\r\n              <div className='player-1'>{gameType}</div>\r\n              <span className='inverse'>\r\n                <Player weapon={playerOneWeapon} />\r\n              </span>\r\n              {gameType === GAME_TYPE_ENUM.PLAYER && <WeaponBtn selectWeapon={this.selectWeapon} />}\r\n            </div>\r\n            <div className='player'>\r\n              <div className='player-2'>Computer</div>\r\n              <Player weapon={playerTwoWeapon} />\r\n            </div>\r\n          </div>\r\n          <div className='home-button-container'>\r\n            <button type='button' className='start-button' onClick={this.startGame}>\r\n              START\r\n            </button>\r\n            <button type='button' className='reset-button' onClick={this.resetGame}>\r\n              RESET\r\n            </button>\r\n          </div>\r\n          <div className='winner'>{winner || ''}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n  return {\r\n    gameType: state.gameType,\r\n    playerOneWeapon: state.playerOneWeapon,\r\n    playerTwoWeapon: state.playerTwoWeapon,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  incrementPlayerOne,\r\n  incrementPlayerTwo,\r\n  resetScore,\r\n  changePlayerOneWeapon,\r\n  changePlayerTwoWeapon,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\r\n","import React from 'react';\n\nimport './App.css';\nimport Home from './components/home/home';\n\nfunction App() {\n  return (\n    <div className='app'>\n      <header className='app-header'>Rock Paper Scissors</header>\n      <div className='app-content'>\n        <Home />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ACTIONS, GAME_TYPE_ENUM, WEAPONS } from './constants';\r\n\r\nconst initialState = () => ({\r\n  playerOne: 0,\r\n  playerTwo: 0,\r\n  playerOneWeapon: WEAPONS[0],\r\n  playerTwoWeapon: WEAPONS[1],\r\n  gameType: GAME_TYPE_ENUM.PLAYER,\r\n});\r\n\r\nconst rootReducer = (state = initialState(), action: any) => {\r\n  switch (action.type) {\r\n    case ACTIONS.SCORE.INCREMENT.PLAYER_ONE:\r\n      return { ...state, playerOne: ++state.playerOne };\r\n    case ACTIONS.SCORE.INCREMENT.PLAYER_TWO:\r\n      return { ...state, playerTwo: ++state.playerTwo };\r\n    case ACTIONS.SCORE.RESET:\r\n      return {\r\n        ...state,\r\n        playerOne: 0,\r\n        playerTwo: 0,\r\n      };\r\n    case ACTIONS.GAME_TYPE_ENUM:\r\n      return { ...state, gameType: action.gameType };\r\n    case ACTIONS.WEAPON.CHANGE.PLAYER_ONE:\r\n      return { ...state, playerOneWeapon: action.weapon };\r\n    case ACTIONS.WEAPON.CHANGE.PLAYER_TWO:\r\n      return { ...state, playerTwoWeapon: action.weapon };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './store/reducer';\nimport { loadState, saveState } from './localStorage';\n\nconst persistedState = loadState();\nconst store = createStore(rootReducer, persistedState);\n\nstore.subscribe(() => {\n  saveState(store.getState());\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem('state');\r\n    if (!serializedState) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem('state', serializedState);\r\n  } catch (err) {}\r\n};\r\n"],"sourceRoot":""}